<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Aeric Blog</title>
    <link>https://aeric.io/post/</link>
    <description>Recent content in Posts on Aeric Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 30 May 2020 20:12:53 +0800</lastBuildDate>
    
	<atom:link href="https://aeric.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kubernetes 安装 Verddacio </title>
      <link>https://aeric.io/post/verddacio-kubernetes/</link>
      <pubDate>Sat, 30 May 2020 20:12:53 +0800</pubDate>
      
      <guid>https://aeric.io/post/verddacio-kubernetes/</guid>
      <description>对于 Verddacio，官方的定义是这样的: Verdaccio is a lightweight private npm proxy registry built in Node.js 。意思就是 Verdaccio 是一个 Node.js 创建的轻量的私有 Npm Proxy Registry。它具有以下特性:</description>
    </item>
    
    <item>
      <title>Yaml 文件高亮工具</title>
      <link>https://aeric.io/post/yh/</link>
      <pubDate>Sat, 16 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://aeric.io/post/yh/</guid>
      <description>我们都知道 jq 工具一般是处理 json 格式的文本，使其可以高亮显示以便提高阅读性，今天偶然发现另一个好玩的工具，这个工具就是 yh ，该工具可以对 yaml 格式的文</description>
    </item>
    
    <item>
      <title>Prometheus 监控 RabbitMQ 集群</title>
      <link>https://aeric.io/post/rabbitmq-prometheus-monitoring/</link>
      <pubDate>Tue, 10 Dec 2019 12:26:28 +0800</pubDate>
      
      <guid>https://aeric.io/post/rabbitmq-prometheus-monitoring/</guid>
      <description>对于 RabbitMQ 集群，虽然官方提供了 RabbitMQ 管理 UI 来监控集群状态，但是从设计上来说这种方式并不是特别方便，这里我是借助 Prometheus 并配合 Grafana 来整体监控 RabbitMQ 集群。 对于 Rab</description>
    </item>
    
    <item>
      <title>Kubernetes 集群部署 Traefik 2.0</title>
      <link>https://aeric.io/post/traefik2.0-install-and-config/</link>
      <pubDate>Sat, 05 Oct 2019 18:12:53 +0800</pubDate>
      
      <guid>https://aeric.io/post/traefik2.0-install-and-config/</guid>
      <description>以前简单介绍了一下 Traefik 2.0 的新特性，这里我试着在已经存在的 Kubernetes 集群中部署 Traefik 2.0 ,需要注意的是新版本的 Traefik 在配置 Ingress 的路由规则的时候是通过自定义的 CRD 对象来</description>
    </item>
    
    <item>
      <title>云原生边缘路由器 Traefik 2.0</title>
      <link>https://aeric.io/post/traefik2.0-acquaintance/</link>
      <pubDate>Thu, 03 Oct 2019 12:01:34 +0800</pubDate>
      
      <guid>https://aeric.io/post/traefik2.0-acquaintance/</guid>
      <description>Traefik 是一个开源的反向代理和负载均衡工具，现在官方介绍中将其定位为云原生的边缘路由器，且用了一堆修饰词：简单、自动、高速、全面、开源、产品级、内</description>
    </item>
    
    <item>
      <title>Kubernetes Dashboard 2.0 尝鲜</title>
      <link>https://aeric.io/post/kubernetes-dashboard-2.0/</link>
      <pubDate>Thu, 26 Sep 2019 12:25:56 +0800</pubDate>
      
      <guid>https://aeric.io/post/kubernetes-dashboard-2.0/</guid>
      <description>新版兼容性问题 因为 Kubernetes 本身更新速度比较快，Kubernetes API 在版本之间差异也是比较大的，这就导致了某些功能在新版的 Dashboard 中不能正常展示，具体兼</description>
    </item>
    
    <item>
      <title>探究 Kubernetes 的亲和性调度</title>
      <link>https://aeric.io/post/kubernetes-affinity/</link>
      <pubDate>Thu, 23 May 2019 21:23:59 +0800</pubDate>
      
      <guid>https://aeric.io/post/kubernetes-affinity/</guid>
      <description>我们在使用 Kubernetes 集群调度应用 POD 的时候，一般情况下我们都是用集群的自动调度机制选择某个节点，默认情况 Kubernetes 集群一般分为预选和优选两种调度策略，计算得分</description>
    </item>
    
    <item>
      <title>Nginx Ingress 配置 HTTPS</title>
      <link>https://aeric.io/post/nginx-ingress-https-redirect/</link>
      <pubDate>Mon, 06 May 2019 17:35:43 +0800</pubDate>
      
      <guid>https://aeric.io/post/nginx-ingress-https-redirect/</guid>
      <description>对于 Nginx Ingress 的 TLS 配置，官方文档已经写得很清楚了，只是有的地方只是点了一下，并没有做出详细的说明，可以说还是有点坑的，哈哈。这里我实际从头开始操作</description>
    </item>
    
    <item>
      <title>Kubernetes 1.14 更新日志</title>
      <link>https://aeric.io/post/kubernetes-1-14-release-changelog/</link>
      <pubDate>Wed, 27 Mar 2019 10:49:54 +0800</pubDate>
      
      <guid>https://aeric.io/post/kubernetes-1-14-release-changelog/</guid>
      <description>总的来说，本次发布的版本主要有以下几大显著特性： 对于管理 Windows node 的生产级支持； Kubectl 的说明文档经过完全重写，并启用新域名:https://kubec</description>
    </item>
    
    <item>
      <title>Prometheus Alertmanager 基本配置</title>
      <link>https://aeric.io/post/prometheus-alertmanager-config/</link>
      <pubDate>Fri, 01 Mar 2019 18:06:59 +0800</pubDate>
      
      <guid>https://aeric.io/post/prometheus-alertmanager-config/</guid>
      <description>在 Prometheus Server 中支持基于 PromQL 创建告警规则，如果满足 PromQL 定义的规则，则会产生一条告警，而告警的后续处理流程则由 AlertManager 进行管理。在 AlertManager 中我们可以与邮件，Slack</description>
    </item>
    
    <item>
      <title>Prometheus 安装和基本配置</title>
      <link>https://aeric.io/post/prometheus-addons-installation/</link>
      <pubDate>Fri, 01 Mar 2019 10:12:14 +0800</pubDate>
      
      <guid>https://aeric.io/post/prometheus-addons-installation/</guid>
      <description>Prometheus 是一个开放性的监控解决方案，用户可以非常方便的安装和使用 Prometheus 并且能够非常方便的对其进行扩展。为了能够更加直观的了解 Prometheus Server，接下来我们</description>
    </item>
    
    <item>
      <title>Prometheus 监控入门介绍</title>
      <link>https://aeric.io/post/prometheus-introduction/</link>
      <pubDate>Wed, 27 Feb 2019 18:59:07 +0800</pubDate>
      
      <guid>https://aeric.io/post/prometheus-introduction/</guid>
      <description>Prometheus 系统简介 首先，Prometheus 受启发于 Google 的 Brogmon 监控系统，相似的 Kubernetes 是从 Google 的 Brog 系统演变而来，从 2012 年开始由前 Google 工程师在 Soundcloud 以开源软件的形式进行研</description>
    </item>
    
    <item>
      <title>容器化部署 Consul 集群</title>
      <link>https://aeric.io/post/consul-cluster-installation-with-containers/</link>
      <pubDate>Sun, 27 Jan 2019 21:09:35 +0800</pubDate>
      
      <guid>https://aeric.io/post/consul-cluster-installation-with-containers/</guid>
      <description>Consul 是 HashiCorp 公司推出的开源工具，用于实现分布式系统的服务发现与配置。Consul 是分布式的、高可用的、 可横向扩展的。它具备以下特性: 服务发现: Consul 提</description>
    </item>
    
    <item>
      <title>用 Harbor 管理 Helm Charts</title>
      <link>https://aeric.io/post/harbor-manage-helm-charts/</link>
      <pubDate>Fri, 18 Jan 2019 10:42:37 +0800</pubDate>
      
      <guid>https://aeric.io/post/harbor-manage-helm-charts/</guid>
      <description>在 v1.6 版本的 harbor 中新增加了 helm charts 的管理功能,这样就可以利用 harbor 同时管理镜像和 helm charts 了，在部署 kubernetes 相关应用时就比较方便，本次尝试用 harbor 来管理 helm charts。</description>
    </item>
    
    <item>
      <title>K8S 包管理工具 Helm - 应用</title>
      <link>https://aeric.io/post/k8s-helm-application/</link>
      <pubDate>Tue, 15 Jan 2019 17:43:22 +0800</pubDate>
      
      <guid>https://aeric.io/post/k8s-helm-application/</guid>
      <description>之前在 kubernetes 集群中已经安装了 Helm 和 Tiller，那么接下来我们需要熟悉一下 Helm 的基本应用，主要包括利用 Helm 创建、打包、分发、安装、升级及回滚 kubernetes 应用。 创</description>
    </item>
    
    <item>
      <title>K8S 包管理工具 Helm - 安装</title>
      <link>https://aeric.io/post/k8s-helm-installation/</link>
      <pubDate>Tue, 15 Jan 2019 17:41:54 +0800</pubDate>
      
      <guid>https://aeric.io/post/k8s-helm-installation/</guid>
      <description>前期在 Kubernetes 集群中部署应用多少有点不适应，因为我们需要维护的资源配置清单 yaml 文件随着应用的增加，对应的文件也越来越多，这就在一定程度上导致了以下几</description>
    </item>
    
    <item>
      <title>K8S 包管理工具 Helm - 介绍</title>
      <link>https://aeric.io/post/k8s-helm-introduction/</link>
      <pubDate>Tue, 15 Jan 2019 17:41:40 +0800</pubDate>
      
      <guid>https://aeric.io/post/k8s-helm-introduction/</guid>
      <description>Helm 是 Kubernetes 生态系统中的一个软件包管理工具，Helm 是由 Deis 发起的一个开源工具，有助于简化部署和管理 Kubernetes 应用。 它有点类似于 Ubuntu 中的 APT 或 CentOS 中的 YUM Helm 官方网站</description>
    </item>
    
    <item>
      <title>mkcert:本地有效的https证书</title>
      <link>https://aeric.io/post/mkcert-valid-https-certificates-for-localhost/</link>
      <pubDate>Mon, 14 Jan 2019 20:30:33 +0800</pubDate>
      
      <guid>https://aeric.io/post/mkcert-valid-https-certificates-for-localhost/</guid>
      <description>随着 HTTPS 的越来越普及，现在绝大数的 WEB 网站已经支持了全站 HTTPS，来防止网络攻击者观察或注入页面内容等，这里介绍一种在本地生成 TLS 证书的工具: mkcert</description>
    </item>
    
    <item>
      <title>Mesos集群二进制方式部署二 </title>
      <link>https://aeric.io/post/mesos-cluster-installation-b/</link>
      <pubDate>Sat, 12 Jan 2019 20:44:13 +0800</pubDate>
      
      <guid>https://aeric.io/post/mesos-cluster-installation-b/</guid>
      <description>本次部署基于 Zookeeper+Mesos+Marathon+Docker，具体部署环境如下： mesos-master1 172.16.8.120 mesos+zookeeper+marathon mesos-master2 172.16.8.121 mesos+zookeeper+marathon mesos-master3 172.16.8.122 mesos+zookeeper+marathon mesos-slave1 172.16.8.110 mesos+docker 上述所有机器系统版本如</description>
    </item>
    
    <item>
      <title>Mesos集群二进制方式部署一</title>
      <link>https://aeric.io/post/mesos-cluster-installation-a/</link>
      <pubDate>Sat, 12 Jan 2019 20:43:44 +0800</pubDate>
      
      <guid>https://aeric.io/post/mesos-cluster-installation-a/</guid>
      <description>私有化 PaaS 平台主要由 Zookeeper、Mesos、Marathon 和 Docker 几个组件构成，各组件用途及扮演的角色信息如下所示： Zookeeper: Zookeeper 是一个分布式的，</description>
    </item>
    
    <item>
      <title>记一次harbor的升级之旅</title>
      <link>https://aeric.io/post/harbor-upgrade-guide/</link>
      <pubDate>Thu, 10 Jan 2019 14:37:01 +0800</pubDate>
      
      <guid>https://aeric.io/post/harbor-upgrade-guide/</guid>
      <description>之前安装的 harbor版本是 v1.6的版本，由于在 v1.7版本中新增加了对 helm的支持，所以为了更充分的利用 harbor 镜像仓库，我们将进行一次升级</description>
    </item>
    
    <item>
      <title>Harbor 私有镜像仓库安装配置</title>
      <link>https://aeric.io/post/harbor-installation/</link>
      <pubDate>Thu, 10 Jan 2019 11:37:01 +0800</pubDate>
      
      <guid>https://aeric.io/post/harbor-installation/</guid>
      <description>在一个企业里，企业自有的私有仓库是必须的，配置私有 docker 镜像仓库 harbor，为的是将自己构建的镜像 push 到私有镜像仓库中，方便以后拉取。 Harbor 的官方站</description>
    </item>
    
    <item>
      <title>Kubernetes集群安装Metrics Server</title>
      <link>https://aeric.io/post/k8s-metrics-server-installation/</link>
      <pubDate>Fri, 04 Jan 2019 12:23:36 +0800</pubDate>
      
      <guid>https://aeric.io/post/k8s-metrics-server-installation/</guid>
      <description>Kubernetes 1.8 关于资源使用情况的 metrics，可以通过 Metrics API 获取到 Kubernetes 1.11 已经废弃 heapster。这里我们基于 Kubernetes 1.12 版本安装 Metrics Server。 Metrics Server 的安装 首先</description>
    </item>
    
    <item>
      <title>容器化部署 Mesos 集群</title>
      <link>https://aeric.io/post/mesos-container-cluster-installation/</link>
      <pubDate>Thu, 06 Dec 2018 16:34:08 +0800</pubDate>
      
      <guid>https://aeric.io/post/mesos-container-cluster-installation/</guid>
      <description>整个 mesos 集群主要由 Zookeeper、Mesos、Marathon 和 Docker 几个组件构成，各组件用途及扮演的角色信息如下所示： Zookeeper: Zookeeper 是一个分布式的，开</description>
    </item>
    
    <item>
      <title>Linux 配置 RabbitMQ 集群</title>
      <link>https://aeric.io/post/rabbitmq-cluster-installation/</link>
      <pubDate>Sun, 02 Dec 2018 16:48:15 +0800</pubDate>
      
      <guid>https://aeric.io/post/rabbitmq-cluster-installation/</guid>
      <description>一般情况下，如果只是为了探究 RabbitMQ 或者验证业务工程的正确性那么在本地环境或者测试环境上使用其单实例部署就可以了，但是出于 MQ 中间件本身的可靠性、并</description>
    </item>
    
    <item>
      <title>Linux 配置 RabbitMQ 服务</title>
      <link>https://aeric.io/post/rabbitmq-single-installation/</link>
      <pubDate>Sun, 02 Dec 2018 16:47:46 +0800</pubDate>
      
      <guid>https://aeric.io/post/rabbitmq-single-installation/</guid>
      <description>RabbitMQ 是由 LShift 提供的一个 Advanced Message Queuing Protocol (AMQP) 的开源实现，由以高性能、健壮以及可伸缩性出名的 Erlang 开发设计，因此也是继承了这些优点。 本文档旨在基于 Erlang 环境在 CentOS 7 系统</description>
    </item>
    
    <item>
      <title>RabbitMQ Erlang 环境配置</title>
      <link>https://aeric.io/post/rabbitmq-erlang-installation/</link>
      <pubDate>Sun, 02 Dec 2018 16:46:51 +0800</pubDate>
      
      <guid>https://aeric.io/post/rabbitmq-erlang-installation/</guid>
      <description>Erlang 是一种多用途编程语言，主要用于开发并发和分布式系统。它最初是一种专有的编程语言，Ericsson 使用它来开发电话和通信应用程序。 本文档旨在</description>
    </item>
    
    <item>
      <title>二进制方式部署Kubernetes集群</title>
      <link>https://aeric.io/post/k8s-installation-with-binary/</link>
      <pubDate>Sat, 01 Dec 2018 15:35:14 +0800</pubDate>
      
      <guid>https://aeric.io/post/k8s-installation-with-binary/</guid>
      <description>在之前的博客中也写到过如何纯手工搭建自己的 Kubernetes 集群，本文档主要是对之前文档的一个总结，具体过程可以参考如下安装流程： Kubernetes-创建</description>
    </item>
    
    <item>
      <title>Kubernetes集群部署DNS插件</title>
      <link>https://aeric.io/post/k8s-dns-addons-installation/</link>
      <pubDate>Sat, 01 Dec 2018 14:35:14 +0800</pubDate>
      
      <guid>https://aeric.io/post/k8s-dns-addons-installation/</guid>
      <description>kube-dns 官方的 yaml 文件其实在我们先前下载的 kubernetes server 软件包内，具体路径为：/srv/kubernetes/cluster/addons/dns 我是把 kuberntes 解压</description>
    </item>
    
    <item>
      <title>Kubernetes集群部署Node节点服务</title>
      <link>https://aeric.io/post/k8s-nodes-installation/</link>
      <pubDate>Fri, 30 Nov 2018 18:35:14 +0800</pubDate>
      
      <guid>https://aeric.io/post/k8s-nodes-installation/</guid>
      <description>kubernetes node 节点包含如下组件： Flanneld Docker:docker直接用yum安装即可 kubelet kube-proxy 注意：每台 node 上都需要安装 flannel，master 节点上可以不必</description>
    </item>
    
    <item>
      <title>Kubernetes集群配置Flannel服务</title>
      <link>https://aeric.io/post/k8s-flannel-and-docker-config/</link>
      <pubDate>Fri, 30 Nov 2018 16:35:14 +0800</pubDate>
      
      <guid>https://aeric.io/post/k8s-flannel-and-docker-config/</guid>
      <description>检查 TLS 证书 [root@ceph-node1 ~]# ls /etc/kubernetes/ssl/ admin-key.pem admin.pem ca-key.pem ca.pem kube-proxy-key.pem kube-proxy.pem kubernetes-key.pem kubernetes.pem 配置 Flannel 服务 建议直接使用 yum 安装 flanneld，除非对版本有特殊需求，默认安装的是 v0.7.1 版本的 flannel。 安</description>
    </item>
    
    <item>
      <title>Kubernetes集群部署Master节点服务</title>
      <link>https://aeric.io/post/k8s-master-installation/</link>
      <pubDate>Fri, 30 Nov 2018 15:35:14 +0800</pubDate>
      
      <guid>https://aeric.io/post/k8s-master-installation/</guid>
      <description>kubernetes master 节点包含的组件包括以下几个部分： 1、 kube-apiserver 2、 kube-scheduler 3、 kube-controller-manager 本次部署我们将三个组件安装在一台机器上，kube-scheduler、kube-con</description>
    </item>
    
    <item>
      <title>Kubernetes集群创建高可用etcd集群</title>
      <link>https://aeric.io/post/k8s-etcd-cluster-installation/</link>
      <pubDate>Fri, 30 Nov 2018 14:35:14 +0800</pubDate>
      
      <guid>https://aeric.io/post/k8s-etcd-cluster-installation/</guid>
      <description>kuberntes 集群使用 etcd 存储所有数据,本部分我们介绍部署一个三节点的高可用 etcd 集群，这三个节点复用kubernetes master机器。 三个 etcd 节点如下所示</description>
    </item>
    
    <item>
      <title>Kubernetes集群安装kubectl工具</title>
      <link>https://aeric.io/post/k8s-kubectl-installation/</link>
      <pubDate>Fri, 30 Nov 2018 14:25:24 +0800</pubDate>
      
      <guid>https://aeric.io/post/k8s-kubectl-installation/</guid>
      <description>其实 kubernetes 的 server 软件包基本涵盖了 kubernetes 几乎所有的工具，所以我们只需要下载 kubernetes 的 server 软件包即可。 kubernetes 源码下载地址： https://github.com/kubernetes/kubernetes/releases/ 本文档是基于 v1.9.6 版本部署 kubernetes 集群，其他版本基本</description>
    </item>
    
    <item>
      <title>Kubernetes集群创建配置文件</title>
      <link>https://aeric.io/post/k8s-create-kubeconfig/</link>
      <pubDate>Fri, 30 Nov 2018 14:25:14 +0800</pubDate>
      
      <guid>https://aeric.io/post/k8s-create-kubeconfig/</guid>
      <description>需要说明的是 kubelet、kube-proxy 等 Node 机器上的进程与 Master 机器的 kube-apiserver 进程通信时需要认证和授权； kubernetes v1.4 版本开始支持由 kube-apiserver 为客户端生成 TLS 证书</description>
    </item>
    
    <item>
      <title>Kubernetes 集群创建 TLS 证书及密钥</title>
      <link>https://aeric.io/post/k8s-create-tls-and-keys/</link>
      <pubDate>Fri, 30 Nov 2018 14:05:14 +0800</pubDate>
      
      <guid>https://aeric.io/post/k8s-create-tls-and-keys/</guid>
      <description>集群环境如下： k8s-master: 192.168.8.66 k8s-nodes: 192.168.8.67 192.168.8.68 k8s-harbor: 192.168.8.69 创建TLS证书及密钥 kubernetes系统的各组件需要使用 TLS 证书对通信进行加密，本文档使用 CloudFlare 的 PKI 工具集 cfssl 来生成</description>
    </item>
    
    <item>
      <title>Docker 服务的一些常用配置</title>
      <link>https://aeric.io/post/docker-other-config/</link>
      <pubDate>Sun, 29 Jul 2018 21:36:09 +0800</pubDate>
      
      <guid>https://aeric.io/post/docker-other-config/</guid>
      <description>同步容器与宿主机时间 在 Docker 容器创建好之后，可能会发现容器时间跟宿主机时间不一致，这就需要同步它们的时间，让容器时间跟宿主机时间保持一致。 宿主机</description>
    </item>
    
    <item>
      <title>使用PASS密码管理器管理密码</title>
      <link>https://aeric.io/post/pass-tool-guide/</link>
      <pubDate>Sun, 29 Jul 2018 14:59:56 +0800</pubDate>
      
      <guid>https://aeric.io/post/pass-tool-guide/</guid>
      <description>关于 PASS 工具 PASS 是 Linux 上的一个简单的命令行密码管理器，它将密码存储在一个 gpg 加密后的文件里。这些加密后的文件很好地组织按目录结构存放，现在密码管理器</description>
    </item>
    
    <item>
      <title>Docker 配置镜像加速器</title>
      <link>https://aeric.io/post/docker-image-accelerator-installation/</link>
      <pubDate>Sat, 28 Jul 2018 21:35:35 +0800</pubDate>
      
      <guid>https://aeric.io/post/docker-image-accelerator-installation/</guid>
      <description>Docker 默认是从 Docker Hub 上拉取所需镜像的，但是一般在国内从 Docker Hub 拉取镜像有时会遇到困难，此时可以配置镜像加速器。为此 Docker 官方和国内很多云服务商都提供了国内</description>
    </item>
    
    <item>
      <title>CentOS 7 安装 Docker</title>
      <link>https://aeric.io/post/docker-installation-guide/</link>
      <pubDate>Fri, 27 Jul 2018 21:35:11 +0800</pubDate>
      
      <guid>https://aeric.io/post/docker-installation-guide/</guid>
      <description>本次安装的 docker 客户端是 CE 版本，具体安装教程可以参考官方文档： Docker Installation 卸载旧版本 Docker 如果要重新安装 Docker ，首先需要在安装之前卸载之前安装过的 Docker 版本，具体卸</description>
    </item>
    
    <item>
      <title>容器 Docker 入门介绍</title>
      <link>https://aeric.io/post/docker-introduction/</link>
      <pubDate>Thu, 26 Jul 2018 21:34:07 +0800</pubDate>
      
      <guid>https://aeric.io/post/docker-introduction/</guid>
      <description>Docker 最初是由 dotCloud 公司创始人 Solomon Hykes 发起的一个公司的内部项目，并于 2013 年实现开源，主要项目代码在 GitHub 上维护。 Docker 使用谷歌公司自己开发的 GO 语言 实现的，基于 Linux 内</description>
    </item>
    
  </channel>
</rss>